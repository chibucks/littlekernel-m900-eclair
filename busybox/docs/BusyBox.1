.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BUSYBOX 1"
.TH BUSYBOX 1 "2010-05-28" "version 1.16.1_SDX-LouZiffer-v1.01" "BusyBox"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BusyBox \- The Swiss Army Knife of Embedded Linux
.SH "SYNTAX"
.IX Header "SYNTAX"
.Vb 1
\& busybox <applet> [arguments...]  # or
\&
\& <applet> [arguments...]          # if symlinked
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
BusyBox combines tiny versions of many common \s-1UNIX\s0 utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in \s-1GNU\s0 coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured \s-1GNU\s0 cousins; however, the
options that are included provide the expected functionality and behave very
much like their \s-1GNU\s0 counterparts.
.PP
BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete \s-1POSIX\s0 environment for any small or embedded
system.
.PP
BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
\&'make' to compile BusyBox using your configuration.
.PP
After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by \s-1CONFIG_PREFIX\s0. \s-1CONFIG_PREFIX\s0 can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by \s-1CONFIG_PREFIX\s0.
.SH "USAGE"
.IX Header "USAGE"
BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.
.PP
You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering
.PP
.Vb 1
\&        /bin/busybox ls
.Ve
.PP
will also cause BusyBox to behave as 'ls'.
.PP
Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.
.PP
For example, entering
.PP
.Vb 2
\&        ln \-s /bin/busybox ls
\&        ./ls
.Ve
.PP
will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.
.PP
If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.
.SH "COMMON OPTIONS"
.IX Header "COMMON OPTIONS"
Most BusyBox applets support the \fB\-\-help\fR argument to provide a terse runtime
description of their behavior.  If the \s-1CONFIG_FEATURE_VERBOSE_USAGE\s0 option has
been enabled, more detailed usage information will also be available.
.SH "COMMANDS"
.IX Header "COMMANDS"
Currently available applets include:
.PP
.Vb 11
\&        [, [[, arp, ash, awk, basename, bunzip2, bzcat, bzip2, chgrp,
\&        chroot, cksum, cp, cut, date, df, diff, dirname, dmesg, dos2unix,
\&        du, dumpkmap, echo, egrep, env, expr, false, fgrep, find, free,
\&        fuser, grep, gunzip, head, id, ifconfig, install, ip, ipaddr,
\&        iplink, iproute, iprule, iptunnel, kbd_mode, less, ls, md5sum, more,
\&        mount, netstat, nohup, nslookup, pidof, pipe_progress, ps, pscan,
\&        pwd, readlink, realpath, reset, route, sed, setconsole, setkeycodes,
\&        setlogcons, showkey, sleep, sort, start\-stop\-daemon, stat, sum,
\&        tail, tar, tee, test, time, top, touch, tr, traceroute, true, tty,
\&        umount, uname, unix2dos, unzip, uptime, usleep, vi, wc, wget, which,
\&        whoami, zcat
.Ve
.SH "COMMAND DESCRIPTIONS"
.IX Header "COMMAND DESCRIPTIONS"
.IP "\fBarp\fR" 4
.IX Item "arp"
arp 
[\-vn]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-a [\s-1HOSTNAME\s0]
[\-v]		    [\-i \s-1IF\s0] \-d \s-1HOSTNAME\s0 [pub]
[\-v]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-s \s-1HOSTNAME\s0 \s-1HWADDR\s0 [temp]
[\-v]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-s \s-1HOSTNAME\s0 \s-1HWADDR\s0 [netmask \s-1MASK\s0] pub
[\-v]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-Ds \s-1HOSTNAME\s0 \s-1IFACE\s0 [netmask \s-1MASK\s0] pub
.Sp
Manipulate \s-1ARP\s0 cache
.Sp
Options:
.Sp
.Vb 9
\&        \-a              Display (all) hosts
\&        \-s              Set new ARP entry
\&        \-d              Delete a specified entry
\&        \-v              Verbose
\&        \-n              Don\*(Aqt resolve names
\&        \-i IF           Network interface
\&        \-D              Read <hwaddr> from given device
\&        \-A, \-p AF       Protocol family
\&        \-H HWTYPE       Hardware address type
.Ve
.IP "\fBawk\fR" 4
.IX Item "awk"
awk [\s-1OPTIONS\s0] [\s-1AWK_PROGRAM\s0] [\s-1FILE\s0]...
.Sp
Options:
.Sp
.Vb 3
\&        \-v VAR=VAL      Set variable
\&        \-F SEP          Use SEP as field separator
\&        \-f FILE         Read program from FILE
.Ve
.IP "\fBbasename\fR" 4
.IX Item "basename"
basename \s-1FILE\s0 [\s-1SUFFIX\s0]
.Sp
Strip directory path and .SUFFIX from \s-1FILE\s0
.IP "\fBbunzip2\fR" 4
.IX Item "bunzip2"
bunzip2 [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Uncompress FILEs (or stdin)
.Sp
Options:
.Sp
.Vb 2
\&        \-c      Write to stdout
\&        \-f      Force
.Ve
.IP "\fBbzcat\fR" 4
.IX Item "bzcat"
bzcat \s-1FILE\s0
.Sp
Uncompress to stdout
.IP "\fBbzip2\fR" 4
.IX Item "bzip2"
bzip2 [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Compress FILEs (or stdin) with bzip2 algorithm
.Sp
Options:
.Sp
.Vb 4
\&        \-c      Write to stdout
\&        \-d      Decompress
\&        \-f      Force
\&        \-1..\-9  Compression level
.Ve
.IP "\fBchgrp\fR" 4
.IX Item "chgrp"
chgrp [\-RhLHP]... \s-1GROUP\s0 \s-1FILE\s0...
.Sp
Change the group membership of each \s-1FILE\s0 to \s-1GROUP\s0
.Sp
Options:
.Sp
.Vb 5
\&        \-R      Recurse
\&        \-h      Affect symlinks instead of symlink targets
\&        \-L      Traverse all symlinks to directories
\&        \-H      Traverse symlinks on command line only
\&        \-P      Don\*(Aqt traverse symlinks (default)
.Ve
.IP "\fBchroot\fR" 4
.IX Item "chroot"
chroot \s-1NEWROOT\s0 [\s-1PROG\s0 \s-1ARGS\s0]
.Sp
Run \s-1PROG\s0 with root directory set to \s-1NEWROOT\s0
.IP "\fBcksum\fR" 4
.IX Item "cksum"
cksum \s-1FILES\s0...
.Sp
Calculate the \s-1CRC32\s0 checksums of \s-1FILES\s0
.IP "\fBcp\fR" 4
.IX Item "cp"
cp [\s-1OPTIONS\s0] \s-1SOURCE\s0 \s-1DEST\s0
.Sp
Copy \s-1SOURCE\s0 to \s-1DEST\s0, or multiple \s-1SOURCE\s0(s) to \s-1DIRECTORY\s0
.Sp
Options:
.Sp
.Vb 9
\&        \-a      Same as \-dpR
\&        \-R,\-r   Recurse
\&        \-d,\-P   Preserve symlinks (default if \-R)
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-p      Preserve file attributes if possible
\&        \-f      Force overwrite
\&        \-i      Prompt before overwrite
\&        \-l,\-s   Create (sym)links
.Ve
.IP "\fBcut\fR" 4
.IX Item "cut"
cut [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print selected fields from each input \s-1FILE\s0 to stdout
.Sp
Options:
.Sp
.Vb 6
\&        \-b LIST Output only bytes from LIST
\&        \-c LIST Output only characters from LIST
\&        \-d CHAR Use CHAR instead of tab as the field delimiter
\&        \-s      Output only the lines containing delimiter
\&        \-f N    Print only these fields
\&        \-n      Ignored
.Ve
.IP "\fBdate\fR" 4
.IX Item "date"
date [\s-1OPTIONS\s0] [+FMT] [\s-1TIME\s0]
.Sp
Display time (using +FMT), or set time
.Sp
Options:
.Sp
.Vb 10
\&        [\-s,\-\-set] TIME Set time to TIME
\&        \-u,\-\-utc        Work in UTC (don\*(Aqt convert to local time)
\&        \-R,\-\-rfc\-2822   Output RFC\-2822 compliant date string
\&        \-I[SPEC]        Output ISO\-8601 compliant date string
\&                        SPEC=\*(Aqdate\*(Aq (default) for date only,
\&                        \*(Aqhours\*(Aq, \*(Aqminutes\*(Aq, or \*(Aqseconds\*(Aq for date and
\&                        time to the indicated precision
\&        \-r,\-\-reference FILE     Display last modification time of FILE
\&        \-d,\-\-date TIME  Display TIME, not \*(Aqnow\*(Aq
\&        \-D FMT          Use FMT for \-d TIME conversion
.Ve
.Sp
Recognized \s-1TIME\s0 formats:
.Sp
.Vb 4
\&        hh:mm[:ss]
\&        [YYYY.]MM.DD\-hh:mm[:ss]
\&        YYYY\-MM\-DD hh:mm[:ss]
\&        [[[[[YY]YY]MM]DD]hh]mm[.ss]
.Ve
.IP "\fBdf\fR" 4
.IX Item "df"
df [\-Pkmhai] [\-B \s-1SIZE\s0] [\s-1FILESYSTEM\s0]...
.Sp
Print filesystem usage statistics
.Sp
Options:
.Sp
.Vb 7
\&        \-P      POSIX output format
\&        \-k      1024\-byte blocks (default)
\&        \-m      1M\-byte blocks
\&        \-h      Human readable (e.g. 1K 243M 2G)
\&        \-a      Show all filesystems
\&        \-i      Inodes
\&        \-B SIZE Blocksize
.Ve
.IP "\fBdiff\fR" 4
.IX Item "diff"
diff [\-abBdiNqrTstw] [\-L \s-1LABEL\s0] [\-S \s-1FILE\s0] [\-U \s-1LINES\s0] \s-1FILE1\s0 \s-1FILE2\s0
.Sp
Compare files line by line and output the differences between them.
This implementation supports unified diffs only.
.Sp
Options:
.Sp
.Vb 10
\&        \-a      Treat all files as text
\&        \-b      Ignore changes in the amount of whitespace
\&        \-B      Ignore changes whose lines are all blank
\&        \-d      Try hard to find a smaller set of changes
\&        \-i      Ignore case differences
\&        \-L      Use LABEL instead of the filename in the unified header
\&        \-N      Treat absent files as empty
\&        \-q      Output only whether files differ
\&        \-r      Recurse
\&        \-S      Start with FILE when comparing directories
\&        \-T      Make tabs line up by prefixing a tab when necessary
\&        \-s      Report when two files are the same
\&        \-t      Expand tabs to spaces in output
\&        \-U      Output LINES lines of context
\&        \-w      Ignore all whitespace
.Ve
.IP "\fBdirname\fR" 4
.IX Item "dirname"
dirname \s-1FILENAME\s0
.Sp
Strip non-directory suffix from \s-1FILENAME\s0
.IP "\fBdmesg\fR" 4
.IX Item "dmesg"
dmesg [\-c] [\-n \s-1LEVEL\s0] [\-s \s-1SIZE\s0]
.Sp
Print or control the kernel ring buffer
.Sp
Options:
.Sp
.Vb 3
\&        \-c              Clear ring buffer after printing
\&        \-n LEVEL        Set console logging level
\&        \-s SIZE         Buffer size
.Ve
.IP "\fBdos2unix\fR" 4
.IX Item "dos2unix"
dos2unix [\s-1OPTIONS\s0] [\s-1FILE\s0]
.Sp
Convert \s-1FILE\s0 in-place from \s-1DOS\s0 to Unix format.
When no file is given, use stdin/stdout.
.Sp
Options:
.Sp
.Vb 2
\&        \-u      dos2unix
\&        \-d      unix2dos
.Ve
.IP "\fBdu\fR" 4
.IX Item "du"
du [\-aHLdclsxhmk] [\s-1FILE\s0]...
.Sp
Summarize disk space used for each \s-1FILE\s0 and/or directory.
Disk space is printed in units of 1024 bytes.
.Sp
Options:
.Sp
.Vb 11
\&        \-a      Show file sizes too
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-d N    Limit output to directories (and files with \-a) of depth < N
\&        \-c      Show grand total
\&        \-l      Count sizes many times if hard linked
\&        \-s      Display only a total for each argument
\&        \-x      Skip directories on different filesystems
\&        \-h      Sizes in human readable format (e.g., 1K 243M 2G )
\&        \-m      Sizes in megabytes
\&        \-k      Sizes in kilobytes (default)
.Ve
.IP "\fBdumpkmap\fR" 4
.IX Item "dumpkmap"
dumpkmap > keymap
.Sp
Print a binary keyboard translation table to stdout
.IP "\fBecho\fR" 4
.IX Item "echo"
echo [\-neE] [\s-1ARG\s0]...
.Sp
Print the specified ARGs to stdout
.Sp
Options:
.Sp
.Vb 3
\&        \-n      Suppress trailing newline
\&        \-e      Interpret backslash\-escaped characters (i.e., \et=tab)
\&        \-E      Disable interpretation of backslash\-escaped characters
.Ve
.IP "\fBenv\fR" 4
.IX Item "env"
env [\-iu] [\-] [name=value]... [\s-1PROG\s0 \s-1ARGS\s0]
.Sp
Print the current environment or run \s-1PROG\s0 after setting up
the specified environment
.Sp
Options:
.Sp
.Vb 2
\&        \-, \-i   Start with an empty environment
\&        \-u      Remove variable from the environment
.Ve
.IP "\fBexpr\fR" 4
.IX Item "expr"
expr \s-1EXPRESSION\s0
.Sp
Print the value of \s-1EXPRESSION\s0 to stdout
.Sp
\&\s-1EXPRESSION\s0 may be:
.Sp
.Vb 10
\&        ARG1 | ARG2     ARG1 if it is neither null nor 0, otherwise ARG2
\&        ARG1 & ARG2     ARG1 if neither argument is null or 0, otherwise 0
\&        ARG1 < ARG2     1 if ARG1 is less than ARG2, else 0. Similarly:
\&        ARG1 <= ARG2
\&        ARG1 = ARG2
\&        ARG1 != ARG2
\&        ARG1 >= ARG2
\&        ARG1 > ARG2
\&        ARG1 + ARG2     Sum of ARG1 and ARG2. Similarly:
\&        ARG1 \- ARG2
\&        ARG1 * ARG2
\&        ARG1 / ARG2
\&        ARG1 % ARG2
\&        STRING : REGEXP         Anchored pattern match of REGEXP in STRING
\&        match STRING REGEXP     Same as STRING : REGEXP
\&        substr STRING POS LENGTH Substring of STRING, POS counted from 1
\&        index STRING CHARS      Index in STRING where any CHARS is found, or 0
\&        length STRING           Length of STRING
\&        quote TOKEN             Interpret TOKEN as a string, even if
\&                                it is a keyword like \*(Aqmatch\*(Aq or an
\&                                operator like \*(Aq/\*(Aq
\&        (EXPRESSION)            Value of EXPRESSION
.Ve
.Sp
Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\&\e( and \e) or null; if \e( and \e) are not used, they return the number
of characters matched or 0.
.IP "\fBfalse\fR" 4
.IX Item "false"
false
.Sp
Return an exit code of \s-1FALSE\s0 (1)
.IP "\fBfind\fR" 4
.IX Item "find"
find [\s-1PATH\s0]... [\s-1EXPRESSION\s0]
.Sp
Search for files. The default \s-1PATH\s0 is the current directory,
default \s-1EXPRESSION\s0 is '\-print'
.Sp
\&\s-1EXPRESSION\s0 may consist of:
.Sp
.Vb 10
\&        \-follow         Follow symlinks
\&        \-xdev           Don\*(Aqt descend directories on other filesystems
\&        \-maxdepth N     Descend at most N levels. \-maxdepth 0 applies
\&                        tests/actions to command line arguments only
\&        \-mindepth N     Don\*(Aqt act on first N levels
\&        \-name PATTERN   File name (w/o directory name) matches PATTERN
\&        \-iname PATTERN  Case insensitive \-name
\&        \-path PATTERN   Path matches PATTERN
\&        \-regex PATTERN  Path matches regex PATTERN
\&        \-type X         File type is X (X is one of: f,d,l,b,c,...)
\&        \-perm NNN       Permissions match any of (+NNN), all of (\-NNN),
\&                        or exactly NNN
\&        \-mtime DAYS     Modified time is greater than (+N), less than (\-N),
\&                        or exactly N days
\&        \-mmin MINS      Modified time is greater than (+N), less than (\-N),
\&                        or exactly N minutes
\&        \-newer FILE     Modified time is more recent than FILE\*(Aqs
\&        \-inum N         File has inode number N
\&        \-user NAME      File is owned by user NAME (numeric user ID allowed)
\&        \-group NAME     File belongs to group NAME (numeric group ID allowed)
\&        \-depth          Process directory name after traversing it
\&        \-size N[bck]    File size is N (c:bytes,k:kbytes,b:512 bytes(def.))
\&                        +/\-N: file size is bigger/smaller than N
\&        \-print          Print (default and assumed)
\&        \-print0         Delimit output with null characters rather than
\&                        newlines
\&        \-exec CMD ARG ; Run CMD with all instances of {} replaced by the
\&                        matching files
\&        \-prune          Stop traversing current subtree
\&        \-delete         Delete files, turns on \-depth option
\&        (EXPR)          Group an expression
.Ve
.IP "\fBfree\fR" 4
.IX Item "free"
free
.Sp
Display the amount of free and used system memory
.IP "\fBfuser\fR" 4
.IX Item "fuser"
fuser [\s-1OPTIONS\s0] \s-1FILE\s0 or \s-1PORT/PROTO\s0
.Sp
Find processes which use FILEs or PORTs
.Sp
Options:
.Sp
.Vb 6
\&        \-m      Find processes which use same fs as FILEs
\&        \-4      Search only IPv4 space
\&        \-6      Search only IPv6 space
\&        \-s      Silent: just exit with 0 if any processes are found
\&        \-k      Kill found processes (otherwise display PIDs)
\&        \-SIGNAL Signal to send (default: TERM)
.Ve
.IP "\fBgrep\fR" 4
.IX Item "grep"
grep [\-HhnlLoqvsriFE] [\-m N] [\-A/B/C N] PATTERN/\-e \s-1PATTERN\s0.../\-f \s-1FILE\s0 [\s-1FILE\s0]...
.Sp
Search for \s-1PATTERN\s0 in FILEs (or stdin)
.Sp
Options:
.Sp
.Vb 10
\&        \-H      Add \*(Aqfilename:\*(Aq prefix
\&        \-h      Do not add \*(Aqfilename:\*(Aq prefix
\&        \-n      Add \*(Aqline_no:\*(Aq prefix
\&        \-l      Show only names of files that match
\&        \-L      Show only names of files that don\*(Aqt match
\&        \-c      Show only count of matching lines
\&        \-o      Show only the matching part of line
\&        \-q      Quiet. Return 0 if PATTERN is found, 1 otherwise
\&        \-v      Select non\-matching lines
\&        \-s      Suppress open and read errors
\&        \-r      Recurse
\&        \-i      Ignore case
\&        \-F      PATTERN is a literal (not regexp)
\&        \-E      PATTERN is an extended regexp
\&        \-m N    Match up to N times per file
\&        \-A N    Print N lines of trailing context
\&        \-B N    Print N lines of leading context
\&        \-C N    Same as \*(Aq\-A N \-B N\*(Aq
\&        \-e PTRN Pattern to match
\&        \-f FILE Read pattern from file
.Ve
.IP "\fBgunzip\fR" 4
.IX Item "gunzip"
gunzip [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Uncompress FILEs (or stdin)
.Sp
Options:
.Sp
.Vb 3
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-t      Test file integrity
.Ve
.IP "\fBhead\fR" 4
.IX Item "head"
head [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print first 10 lines of each \s-1FILE\s0 (or stdin) to stdout.
With more than one \s-1FILE\s0, precede each with a header giving the file name.
.Sp
Options:
.Sp
.Vb 4
\&        \-n N    Print first N lines instead of first 10
\&        \-c N    Output the first N bytes
\&        \-q      Never output headers giving file names
\&        \-v      Always output headers giving file names
.Ve
.IP "\fBid\fR" 4
.IX Item "id"
id [\s-1OPTIONS\s0] [\s-1USER\s0]
.Sp
Print information about \s-1USER\s0 or the current user
.Sp
Options:
.Sp
.Vb 5
\&        \-u      Print user ID
\&        \-g      Print group ID
\&        \-G      Print supplementary group IDs
\&        \-n      Print name instead of a number
\&        \-r      Print real user ID instead of effective ID
.Ve
.IP "\fBifconfig\fR" 4
.IX Item "ifconfig"
ifconfig [\-a] interface [address]
.Sp
Configure a network interface
.Sp
Options:
.Sp
.Vb 6
\&        [[\-]broadcast [ADDRESS]] [[\-]pointopoint [ADDRESS]]
\&        [netmask ADDRESS] [dstaddr ADDRESS]
\&        [hw ether ADDRESS] [metric NN] [mtu NN]
\&        [[\-]trailers] [[\-]arp] [[\-]allmulti]
\&        [multicast] [[\-]promisc] [txqueuelen NN] [[\-]dynamic]
\&        [up|down] ...
.Ve
.IP "\fBinstall\fR" 4
.IX Item "install"
install [\-cdDsp] [\-o \s-1USER\s0] [\-g \s-1GRP\s0] [\-m \s-1MODE\s0] [\s-1SOURCE\s0]... \s-1DEST\s0
.Sp
Copy files and set attributes
.Sp
Options:
.Sp
.Vb 8
\&        \-c      Just copy (default)
\&        \-d      Create directories
\&        \-D      Create leading target directories
\&        \-s      Strip symbol table
\&        \-p      Preserve date
\&        \-o USER Set ownership
\&        \-g GRP  Set group ownership
\&        \-m MODE Set permissions
.Ve
.IP "\fBip\fR" 4
.IX Item "ip"
ip [\s-1OPTIONS\s0] {address | route | link | tunnel | rule} {\s-1COMMAND\s0}
.Sp
ip [\s-1OPTIONS\s0] \s-1OBJECT\s0 {\s-1COMMAND\s0}
where \s-1OBJECT\s0 := {address | route | link | tunnel | rule}
\&\s-1OPTIONS\s0 := { \-f[amily] { inet | inet6 | link } | \-o[neline] }
.IP "\fBipaddr\fR" 4
.IX Item "ipaddr"
ipaddr { {add|del} \s-1IFADDR\s0 dev \s-1STRING\s0 | {show|flush}
		[dev \s-1STRING\s0] [to \s-1PREFIX\s0] }
.Sp
ipaddr {add|delete} \s-1IFADDR\s0 dev \s-1STRING\s0
ipaddr {show|flush} [dev \s-1STRING\s0] [scope \s-1SCOPE\-ID\s0]
	[to \s-1PREFIX\s0] [label \s-1PATTERN\s0]
	\s-1IFADDR\s0 := \s-1PREFIX\s0 | \s-1ADDR\s0 peer \s-1PREFIX\s0
	[broadcast \s-1ADDR\s0] [anycast \s-1ADDR\s0]
	[label \s-1STRING\s0] [scope \s-1SCOPE\-ID\s0]
	SCOPE-ID := [host | link | global | \s-1NUMBER\s0]
.IP "\fBiplink\fR" 4
.IX Item "iplink"
iplink { set \s-1DEVICE\s0 { up | down | arp { on | off } | show [\s-1DEVICE\s0] }
.Sp
iplink set \s-1DEVICE\s0 { up | down | arp | multicast { on | off } |
			dynamic { on | off } |
			mtu \s-1MTU\s0 }
iplink show [\s-1DEVICE\s0]
.IP "\fBiproute\fR" 4
.IX Item "iproute"
iproute { list | flush | { add | del | change | append |
		replace | monitor } \s-1ROUTE\s0 }
.Sp
iproute { list | flush } \s-1SELECTOR\s0
iproute get \s-1ADDRESS\s0 [from \s-1ADDRESS\s0 iif \s-1STRING\s0]
			[oif \s-1STRING\s0]  [tos \s-1TOS\s0]
iproute { add | del | change | append | replace | monitor } \s-1ROUTE\s0
			\s-1SELECTOR\s0 := [root \s-1PREFIX\s0] [match \s-1PREFIX\s0] [proto \s-1RTPROTO\s0]
			\s-1ROUTE\s0 := [\s-1TYPE\s0] \s-1PREFIX\s0 [tos \s-1TOS\s0] [proto \s-1RTPROTO\s0]
				[metric \s-1METRIC\s0]
.IP "\fBiprule\fR" 4
.IX Item "iprule"
iprule {[list | add | del] \s-1RULE\s0}
.Sp
iprule [list | add | del] \s-1SELECTOR\s0 \s-1ACTION\s0
	\s-1SELECTOR\s0 := [from \s-1PREFIX\s0] [to \s-1PREFIX\s0] [tos \s-1TOS\s0] [fwmark \s-1FWMARK\s0]
			[dev \s-1STRING\s0] [pref \s-1NUMBER\s0]
	\s-1ACTION\s0 := [table \s-1TABLE_ID\s0] [nat \s-1ADDRESS\s0]
			[prohibit | reject | unreachable]
			[realms [\s-1SRCREALM/\s0]DSTREALM]
	\s-1TABLE_ID\s0 := [local | main | default | \s-1NUMBER\s0]
.IP "\fBiptunnel\fR" 4
.IX Item "iptunnel"
iptunnel { add | change | del | show } [\s-1NAME\s0]
	[mode { ipip | gre | sit }]
	[remote \s-1ADDR\s0] [local \s-1ADDR\s0] [ttl \s-1TTL\s0]
.Sp
iptunnel { add | change | del | show } [\s-1NAME\s0]
	[mode { ipip | gre | sit }] [remote \s-1ADDR\s0] [local \s-1ADDR\s0]
	[[i|o]seq] [[i|o]key \s-1KEY\s0] [[i|o]csum]
	[ttl \s-1TTL\s0] [tos \s-1TOS\s0] [[no]pmtudisc] [dev \s-1PHYS_DEV\s0]
.IP "\fBkbd_mode\fR" 4
.IX Item "kbd_mode"
kbd_mode [\-a|k|s|u] [\-C \s-1TTY\s0]
.Sp
Report or set the keyboard mode
.Sp
Options:
.Sp
.Vb 5
\&        \-a      Default (ASCII)
\&        \-k      Medium\-raw (keyboard)
\&        \-s      Raw (scancode)
\&        \-u      Unicode (utf\-8)
\&        \-C TTY  Affect TTY instead of /dev/tty
.Ve
.IP "\fBless\fR" 4
.IX Item "less"
less [\-EMNmh~I?] [\s-1FILE\s0]...
.Sp
View \s-1FILE\s0 (or stdin) one screenful at a time
.Sp
Options:
.Sp
.Vb 6
\&        \-E      Quit once the end of a file is reached
\&        \-M,\-m   Display status line with line numbers
\&                and percentage through the file
\&        \-N      Prefix line number to each line
\&        \-I      Ignore case in all searches
\&        \-~      Suppress ~s displayed past the end of the file
.Ve
.IP "\fBls\fR" 4
.IX Item "ls"
ls [\-1AacCdeFilnpLRrSsTtuvwxXhk] [\s-1FILE\s0]...
.Sp
List directory contents
.Sp
Options:
.Sp
.Vb 10
\&        \-1      List in a single column
\&        \-A      Don\*(Aqt list . and ..
\&        \-a      Don\*(Aqt hide entries starting with .
\&        \-C      List by columns
\&        \-c      With \-l: sort by ctime
\&        \-\-color[={always,never,auto}]   Control coloring
\&        \-d      List directory entries instead of contents
\&        \-e      List full date and time
\&        \-F      Append indicator (one of */=@|) to entries
\&        \-i      List inode numbers
\&        \-l      Long listing format
\&        \-n      List numeric UIDs and GIDs instead of names
\&        \-p      Append indicator (one of /=@|) to entries
\&        \-L      List entries pointed to by symlinks
\&        \-R      Recurse
\&        \-r      Sort in reverse order
\&        \-S      Sort by file size
\&        \-s      List the size of each file, in blocks
\&        \-T N    Assume tabstop every N columns
\&        \-t      With \-l: sort by modification time
\&        \-u      With \-l: sort by access time
\&        \-v      Sort by version
\&        \-w N    Assume the terminal is N columns wide
\&        \-x      List by lines
\&        \-X      Sort by extension
\&        \-h      List sizes in human readable format (1K 243M 2G)
.Ve
.IP "\fBmd5sum\fR" 4
.IX Item "md5sum"
md5sum [\s-1OPTIONS\s0] [\s-1FILE\s0]...
   or: md5sum [\s-1OPTIONS\s0] \-c [\s-1FILE\s0]
.Sp
Print or check \s-1MD5\s0 checksums
.Sp
Options:
.Sp
.Vb 3
\&        \-c      Check sums against given list
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBmore\fR" 4
.IX Item "more"
more [\s-1FILE\s0]...
.Sp
View \s-1FILE\s0 (or stdin) one screenful at a time
.IP "\fBmount\fR" 4
.IX Item "mount"
mount [\s-1OPTIONS\s0] [\-o \s-1OPTS\s0] \s-1DEVICE\s0 \s-1NODE\s0
.Sp
Mount a filesystem. Filesystem autodetection requires /proc.
.Sp
Options:
.Sp
.Vb 10
\&        \-a              Mount all filesystems in fstab
\&        \-f              Dry run
\&        \-i              Don\*(Aqt run mount helper
\&        \-r              Read\-only mount
\&        \-w              Read\-write mount (default)
\&        \-t FSTYPE       Filesystem type
\&        \-O OPT          Mount only filesystems with option OPT (\-a only)
\&\-o OPT:
\&        loop            Ignored (loop devices are autodetected)
\&        [a]sync         Writes are [a]synchronous
\&        [no]atime       Disable/enable updates to inode access times
\&        [no]diratime    Disable/enable atime updates to directories
\&        [no]relatime    Disable/enable atime updates relative to modification time
\&        [no]dev         (Dis)allow use of special device files
\&        [no]exec        (Dis)allow use of executable files
\&        [no]suid        (Dis)allow set\-user\-id\-root programs
\&        [r]shared       Convert [recursively] to a shared subtree
\&        [r]slave        Convert [recursively] to a slave subtree
\&        [r]private      Convert [recursively] to a private subtree
\&        [un]bindable    Make mount point [un]able to be bind mounted
\&        bind            Bind a file or directory to another location
\&        move            Relocate an existing mount point
\&        remount         Remount a mounted filesystem, changing flags
\&        ro/rw           Same as \-r/\-w
.Ve
.Sp
There are filesystem-specific \-o flags.
.IP "\fBnetstat\fR" 4
.IX Item "netstat"
netstat [\-laentuwxrWp]
.Sp
Display networking information
.Sp
Options:
.Sp
.Vb 11
\&        \-l      Display listening server sockets
\&        \-a      Display all sockets (default: connected)
\&        \-e      Display other/more information
\&        \-n      Don\*(Aqt resolve names
\&        \-t      Tcp sockets
\&        \-u      Udp sockets
\&        \-w      Raw sockets
\&        \-x      Unix sockets
\&        \-r      Display routing table
\&        \-W      Display with no column truncation
\&        \-p      Display PID/Program name for sockets
.Ve
.IP "\fBnohup\fR" 4
.IX Item "nohup"
nohup \s-1PROG\s0 \s-1ARGS\s0
.Sp
Run \s-1PROG\s0 immune to hangups, with output to a non-tty
.IP "\fBnslookup\fR" 4
.IX Item "nslookup"
nslookup [\s-1HOST\s0] [\s-1SERVER\s0]
.Sp
Query the nameserver for the \s-1IP\s0 address of the given \s-1HOST\s0
optionally using a specified \s-1DNS\s0 server
.IP "\fBpidof\fR" 4
.IX Item "pidof"
pidof [\s-1OPTIONS\s0] [\s-1NAME\s0]...
.Sp
List PIDs of all processes with names that match NAMEs
.Sp
Options:
.Sp
.Vb 2
\&        \-o PID  Omit given pid
\&                Use %PPID to omit pid of pidof\*(Aqs parent
.Ve
.IP "\fBps\fR" 4
.IX Item "ps"
ps
.Sp
Report process status
.Sp
Options:
.Sp
.Vb 1
\&        w       Wide output
.Ve
.IP "\fBpscan\fR" 4
.IX Item "pscan"
pscan [\-cb] [\-p \s-1MIN_PORT\s0] [\-P \s-1MAX_PORT\s0] [\-t \s-1TIMEOUT\s0] [\-T \s-1MIN_RTT\s0] \s-1HOST\s0
.Sp
Scan a host, print all open ports
.Sp
Options:
.Sp
.Vb 6
\&        \-c      Show closed ports too
\&        \-b      Show blocked ports too
\&        \-p      Scan from this port (default 1)
\&        \-P      Scan up to this port (default 1024)
\&        \-t      Timeout (default 5000 ms)
\&        \-T      Minimum rtt (default 5 ms, increase for congested hosts)
.Ve
.IP "\fBpwd\fR" 4
.IX Item "pwd"
pwd
.Sp
Print the full filename of the current working directory
.IP "\fBreadlink\fR" 4
.IX Item "readlink"
readlink [\-fnv] \s-1FILE\s0
.Sp
Display the value of a symlink
.Sp
Options:
.Sp
.Vb 3
\&        \-f      Canonicalize by following all symlinks
\&        \-n      Don\*(Aqt add newline
\&        \-v      Verbose
.Ve
.IP "\fBrealpath\fR" 4
.IX Item "realpath"
realpath \s-1FILE\s0...
.Sp
Return the absolute pathnames of given \s-1FILE\s0
.IP "\fBreset\fR" 4
.IX Item "reset"
reset
.Sp
Reset the screen
.IP "\fBroute\fR" 4
.IX Item "route"
route [{add|del|delete}]
.Sp
Edit kernel routing tables
.Sp
Options:
.Sp
.Vb 3
\&        \-n      Don\*(Aqt resolve names
\&        \-e      Display other/more information
\&        \-A inet Select address family
.Ve
.IP "\fBsed\fR" 4
.IX Item "sed"
sed [\-efinr] \s-1SED_CMD\s0 [\s-1FILE\s0]...
.Sp
Options:
.Sp
.Vb 5
\&        \-e CMD  Add CMD to sed commands to be executed
\&        \-f FILE Add FILE contents to sed commands to be executed
\&        \-i      Edit files in\-place (else sends result to stdout)
\&        \-n      Suppress automatic printing of pattern space
\&        \-r      Use extended regex syntax
.Ve
.Sp
If no \-e or \-f, the first non-option argument is the sed command string.
Remaining arguments are input files (stdin if none).
.IP "\fBsetconsole\fR" 4
.IX Item "setconsole"
setconsole [\-r|\-\-reset] [\s-1DEVICE\s0]
.Sp
Redirect system console output to \s-1DEVICE\s0 (default: /dev/tty)
.Sp
Options:
.Sp
.Vb 1
\&        \-r      Reset output to /dev/console
.Ve
.IP "\fBsetkeycodes\fR" 4
.IX Item "setkeycodes"
setkeycodes \s-1SCANCODE\s0 \s-1KEYCODE\s0...
.Sp
Set entries into the kernel's scancode-to-keycode map,
allowing unusual keyboards to generate usable keycodes.
.Sp
\&\s-1SCANCODE\s0 may be either xx or e0xx (hexadecimal),
and \s-1KEYCODE\s0 is given in decimal.
.IP "\fBsetlogcons\fR" 4
.IX Item "setlogcons"
setlogcons N
.Sp
Redirect the kernel output to console N (0 for current)
.IP "\fBshowkey\fR" 4
.IX Item "showkey"
showkey [\-a | \-k | \-s]
.Sp
Show keys pressed
.Sp
Options:
.Sp
.Vb 3
\&        \-a      Display decimal/octal/hex values of the keys
\&        \-k      Display interpreted keycodes (default)
\&        \-s      Display raw scan\-codes
.Ve
.IP "\fBsleep\fR" 4
.IX Item "sleep"
sleep [N]...
.Sp
Pause for a time equal to the total of the args given, where each arg can
have an optional suffix of (s)econds, (m)inutes, (h)ours, or (d)ays
.IP "\fBsort\fR" 4
.IX Item "sort"
sort [\-nrugMcszbdfimSTokt] [\-o \s-1FILE\s0] [\-k start[.offset][opts][,end[.offset][opts]] [\-t \s-1CHAR\s0] [\s-1FILE\s0]...
.Sp
Sort lines of text
.Sp
Options:
.Sp
.Vb 10
\&        \-b      Ignore leading blanks
\&        \-c      Check whether input is sorted
\&        \-d      Dictionary order (blank or alphanumeric only)
\&        \-f      Ignore case
\&        \-g      General numerical sort
\&        \-i      Ignore unprintable characters
\&        \-k      Sort key
\&        \-M      Sort month
\&        \-n      Sort numbers
\&        \-o      Output to file
\&        \-k      Sort by key
\&        \-t CHAR Key separator
\&        \-r      Reverse sort order
\&        \-s      Stable (don\*(Aqt sort ties alphabetically)
\&        \-u      Suppress duplicate lines
\&        \-z      Lines are terminated by NUL, not newline
\&        \-mST    Ignored for GNU compatibility
.Ve
.IP "\fBstart-stop-daemon\fR" 4
.IX Item "start-stop-daemon"
start-stop-daemon [\s-1OPTIONS\s0] [\-S|\-K] ... [\-\- \s-1ARGS\s0...]
.Sp
Search for matching processes, and then
\&\-K: stop all matching processes.
\&\-S: start a process unless a matching process is found.
.Sp
Process matching:
.Sp
.Vb 10
\&        \-u,\-\-user USERNAME|UID  Match only this user\*(Aqs processes
\&        \-n,\-\-name NAME          Match processes with NAME
\&                                in comm field in /proc/PID/stat
\&        \-x,\-\-exec EXECUTABLE    Match processes with this command
\&                                in /proc/PID/cmdline
\&        \-p,\-\-pidfile FILE       Match a process with PID from the file
\&        All specified conditions must match
\&\-S only:
\&        \-x,\-\-exec EXECUTABLE    Program to run
\&        \-a,\-\-startas NAME       Zeroth argument
\&        \-b,\-\-background         Background
\&        \-N,\-\-nicelevel N        Change nice level
\&        \-c,\-\-chuid USER[:[GRP]] Change to user/group
\&        \-m,\-\-make\-pidfile       Write PID to the pidfile specified by \-p
\&\-K only:
\&        \-s,\-\-signal SIG         Signal to send
\&        \-t,\-\-test               Match only, exit with 0 if a process is found
\&Other:
\&
\&        \-o,\-\-oknodo             Exit with status 0 if nothing is done
\&        \-v,\-\-verbose            Verbose
\&        \-q,\-\-quiet              Quiet
.Ve
.IP "\fBstat\fR" 4
.IX Item "stat"
stat [\s-1OPTIONS\s0] \s-1FILE\s0...
.Sp
Display file (default) or filesystem status
.Sp
Options:
.Sp
.Vb 4
\&        \-c fmt  Use the specified format
\&        \-f      Display filesystem status
\&        \-L      Follow links
\&        \-t      Display info in terse form
.Ve
.Sp
Valid format sequences for files:
.Sp
.Vb 10
\& %a     Access rights in octal
\& %A     Access rights in human readable form
\& %b     Number of blocks allocated (see %B)
\& %B     The size in bytes of each block reported by %b
\& %d     Device number in decimal
\& %D     Device number in hex
\& %f     Raw mode in hex
\& %F     File type
\& %g     Group ID of owner
\& %G     Group name of owner
\& %h     Number of hard links
\& %i     Inode number
\& %n     File name
\& %N     File name, with \-> TARGET if symlink
\& %o     I/O block size
\& %s     Total size, in bytes
\& %t     Major device type in hex
\& %T     Minor device type in hex
\& %u     User ID of owner
\& %U     User name of owner
\& %x     Time of last access
\& %X     Time of last access as seconds since Epoch
\& %y     Time of last modification
\& %Y     Time of last modification as seconds since Epoch
\& %z     Time of last change
\& %Z     Time of last change as seconds since Epoch
.Ve
.Sp
Valid format sequences for file systems:
.Sp
.Vb 12
\& %a     Free blocks available to non\-superuser
\& %b     Total data blocks in file system
\& %c     Total file nodes in file system
\& %d     Free file nodes in file system
\& %f     Free blocks in file system
\& %i     File System ID in hex
\& %l     Maximum length of filenames
\& %n     File name
\& %s     Block size (for faster transfer)
\& %S     Fundamental block size (for block counts)
\& %t     Type in hex
\& %T     Type in human readable form
.Ve
.IP "\fBsum\fR" 4
.IX Item "sum"
sum [\-rs] [\s-1FILE\s0]...
.Sp
Checksum and count the blocks in a file
.Sp
Options:
.Sp
.Vb 2
\&        \-r      Use BSD sum algorithm (1K blocks)
\&        \-s      Use System V sum algorithm (512byte blocks)
.Ve
.IP "\fBtail\fR" 4
.IX Item "tail"
tail [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print last 10 lines of each \s-1FILE\s0 (or stdin) to stdout.
With more than one \s-1FILE\s0, precede each with a header giving the file name.
.Sp
Options:
.Sp
.Vb 6
\&        \-c N[kbm]       Output last N bytes
\&        \-n N[kbm]       Print last N lines instead of last 10
\&        \-f              Output data as the file grows
\&        \-q              Never output headers giving file names
\&        \-s SEC          Wait SEC seconds between reads with \-f
\&        \-v              Always output headers giving file names
.Ve
.Sp
If the first character of N (bytes or lines) is a '+', output begins with
the Nth item from the start of each file, otherwise, print the last N items
in the file. N bytes may be suffixed by k (x1024), b (x512), or m (1024^2).
.IP "\fBtar\fR" 4
.IX Item "tar"
tar \-[cxtzjaZvO] [\-X \s-1FILE\s0] [\-f \s-1TARFILE\s0] [\-C \s-1DIR\s0] [\s-1FILE\s0]...
.Sp
Create, extract, or list files from a tar file
.Sp
Options:
.Sp
.Vb 4
\&        c       Create
\&        x       Extract
\&        t       List
\&Archive format selection:
\&
\&        z       Filter the archive through gzip
\&        j       Filter the archive through bzip2
\&        a       Filter the archive through lzma
\&        Z       Filter the archive through compress
\&File selection:
\&
\&        f       Name of TARFILE or "\-" for stdin
\&        O       Extract to stdout
\&        exclude File to exclude
\&        X       File with names to exclude
\&        C       Change to DIR before operation
\&        v       Verbose
.Ve
.IP "\fBtee\fR" 4
.IX Item "tee"
tee [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Copy stdin to each \s-1FILE\s0, and also to stdout
.Sp
Options:
.Sp
.Vb 2
\&        \-a      Append to the given FILEs, don\*(Aqt overwrite
\&        \-i      Ignore interrupt signals (SIGINT)
.Ve
.IP "\fBtest\fR" 4
.IX Item "test"
test \s-1EXPRESSION\s0 ]
.Sp
Check file types, compare values etc. Return a 0/1 exit code
depending on logical value of \s-1EXPRESSION\s0
.IP "\fBtime\fR" 4
.IX Item "time"
time [\s-1OPTIONS\s0] \s-1PROG\s0 \s-1ARGS\s0
.Sp
Run \s-1PROG\s0, display resource usage when it exits
.Sp
Options:
.Sp
.Vb 1
\&        \-v      Verbose
.Ve
.IP "\fBtop\fR" 4
.IX Item "top"
top [\-b] [\-nCOUNT] [\-dSECONDS] [\-m]
.Sp
Provide a view of process activity in real time.
Read the status of all processes from /proc each \s-1SECONDS\s0
and display a screenful of them.
.IP "\fBtouch\fR" 4
.IX Item "touch"
touch [\-c] [\-d \s-1DATE\s0] \s-1FILE\s0 [\s-1FILE\s0]...
.Sp
Update the last-modified date on the given FILE[s]
.Sp
Options:
.Sp
.Vb 2
\&        \-c      Don\*(Aqt create files
\&        \-d DT   Date/time to use
.Ve
.IP "\fBtr\fR" 4
.IX Item "tr"
tr [\-cds] \s-1STRING1\s0 [\s-1STRING2\s0]
.Sp
Translate, squeeze, or delete characters from stdin, writing to stdout
.Sp
Options:
.Sp
.Vb 3
\&        \-c      Take complement of STRING1
\&        \-d      Delete input characters coded STRING1
\&        \-s      Squeeze multiple output characters of STRING2 into one character
.Ve
.IP "\fBtraceroute\fR" 4
.IX Item "traceroute"
traceroute [\-FIldnrv] [\-f 1ST_TTL] [\-m \s-1MAXTTL\s0] [\-p \s-1PORT\s0] [\-q \s-1PROBES\s0]
	[\-s \s-1SRC_IP\s0] [\-t \s-1TOS\s0] [\-w \s-1WAIT_SEC\s0] [\-g \s-1GATEWAY\s0] [\-i \s-1IFACE\s0]
	[\-z \s-1PAUSE_MSEC\s0] \s-1HOST\s0 [\s-1BYTES\s0]
.Sp
Trace the route to \s-1HOST\s0
.Sp
Options:
.Sp
.Vb 10
\&        \-F      Set the don\*(Aqt fragment bit
\&        \-I      Use ICMP ECHO instead of UDP datagrams
\&        \-l      Display the TTL value of the returned packet
\&        \-d      Set SO_DEBUG options to socket
\&        \-n      Print numeric addresses
\&        \-r      Bypass routing tables, send directly to HOST
\&        \-v      Verbose
\&        \-m      Max time\-to\-live (max number of hops)
\&        \-p      Base UDP port number used in probes
\&                (default 33434)
\&        \-q      Number of probes per TTL (default 3)
\&        \-s      IP address to use as the source address
\&        \-t      Type\-of\-service in probe packets (default 0)
\&        \-w      Time in seconds to wait for a response (default 3)
\&        \-g      Loose source route gateway (8 max)
.Ve
.IP "\fBtrue\fR" 4
.IX Item "true"
true
.Sp
Return an exit code of \s-1TRUE\s0 (0)
.IP "\fBtty\fR" 4
.IX Item "tty"
tty
.Sp
Print file name of stdin's terminal
.IP "\fBumount\fR" 4
.IX Item "umount"
umount [\s-1OPTIONS\s0] FILESYSTEM|DIRECTORY
.Sp
Unmount file systems
.Sp
Options:
.Sp
.Vb 5
\&        \-a      Unmount all file systems
\&        \-r      Try to remount devices as read\-only if mount is busy
\&        \-l      Lazy umount (detach filesystem)
\&        \-f      Force umount (i.e., unreachable NFS server)
\&        \-d      Free loop device if it has been used
.Ve
.IP "\fBuname\fR" 4
.IX Item "uname"
uname [\-amnrspv]
.Sp
Print system information
.Sp
Options:
.Sp
.Vb 7
\&        \-a      Print all
\&        \-m      The machine (hardware) type
\&        \-n      Hostname
\&        \-r      OS release
\&        \-s      OS name (default)
\&        \-p      Processor type
\&        \-v      OS version
.Ve
.IP "\fBunix2dos\fR" 4
.IX Item "unix2dos"
unix2dos [\s-1OPTIONS\s0] [\s-1FILE\s0]
.Sp
Convert \s-1FILE\s0 in-place from Unix to \s-1DOS\s0 format.
When no file is given, use stdin/stdout.
.Sp
Options:
.Sp
.Vb 2
\&        \-u      dos2unix
\&        \-d      unix2dos
.Ve
.IP "\fBunzip\fR" 4
.IX Item "unzip"
unzip [\-opts[modifiers]] file[.zip] [list] [\-x xlist] [\-d exdir]
.Sp
Extract files from \s-1ZIP\s0 archives
.Sp
Options:
.Sp
.Vb 7
\&        \-l      List archive contents (with \-q for short form)
\&        \-n      Never overwrite existing files (default)
\&        \-o      Overwrite files without prompting
\&        \-p      Send output to stdout
\&        \-q      Quiet
\&        \-x      Exclude these files
\&        \-d      Extract files into this directory
.Ve
.IP "\fBuptime\fR" 4
.IX Item "uptime"
uptime
.Sp
Display the time since the last boot
.IP "\fBusleep\fR" 4
.IX Item "usleep"
usleep N
.Sp
Pause for N microseconds
.IP "\fBvi\fR" 4
.IX Item "vi"
vi [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Edit \s-1FILE\s0
.Sp
Options:
.Sp
.Vb 3
\&        \-c      Initial command to run ($EXINIT also available)
\&        \-R      Read\-only
\&        \-H      Short help regarding available features
.Ve
.IP "\fBwc\fR" 4
.IX Item "wc"
wc [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print line, word, and byte counts for each \s-1FILE\s0 (or stdin),
and a total line if more than one \s-1FILE\s0 is specified
.Sp
Options:
.Sp
.Vb 4
\&        \-c      Print the byte counts
\&        \-l      Print the newline counts
\&        \-L      Print the length of the longest line
\&        \-w      Print the word counts
.Ve
.IP "\fBwget\fR" 4
.IX Item "wget"
wget [\-csq] [\-O file] [\-Y on/off] [\-P \s-1DIR\s0] [\-U agent] url
.Sp
Retrieve files via \s-1HTTP\s0 or \s-1FTP\s0
.Sp
Options:
.Sp
.Vb 7
\&        \-s      Spider mode \- only check file existence
\&        \-c      Continue retrieval of aborted transfer
\&        \-q      Quiet
\&        \-P      Set directory prefix to DIR
\&        \-O      Save to filename (\*(Aq\-\*(Aq for stdout)
\&        \-U      Adjust \*(AqUser\-Agent\*(Aq field
\&        \-Y      Use proxy (\*(Aqon\*(Aq or \*(Aqoff\*(Aq)
.Ve
.IP "\fBwhich\fR" 4
.IX Item "which"
which [\s-1COMMAND\s0]...
.Sp
Locate a \s-1COMMAND\s0
.IP "\fBwhoami\fR" 4
.IX Item "whoami"
whoami
.Sp
Print the user name associated with the current effective user id
.IP "\fBzcat\fR" 4
.IX Item "zcat"
zcat \s-1FILE\s0
.Sp
Uncompress to stdout
.SH "LIBC NSS"
.IX Header "LIBC NSS"
\&\s-1GNU\s0 Libc (glibc) uses the Name Service Switch (\s-1NSS\s0) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of \s-1NSS\s0.  Some applets however, such as login and su, will use libc functions
that require \s-1NSS\s0.
.PP
If you enable \s-1CONFIG_USE_BB_PWD_GRP\s0, BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using \s-1NSS\s0.  This may allow you to run your system without the need for
installing any of the \s-1NSS\s0 configuration files and libraries.
.PP
When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc \s-1NSS\s0 stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).
.PP
Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any \s-1NSS\s0 support files or libraries.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Denis Vlasenko <vda.linux@googlemail.com>
.SH "AUTHORS"
.IX Header "AUTHORS"
The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.
.PP
Emanuele Aina <emanuele.aina@tiscali.it>
    run-parts
.PP
Erik Andersen <andersen@codepoet.org>
.PP
.Vb 4
\&    Tons of new stuff, major rewrite of most of the
\&    core apps, tons of new apps as noted in header files.
\&    Lots of tedious effort writing these boring docs that
\&    nobody is going to actually read.
.Ve
.PP
Laurence Anderson <l.d.anderson@warwick.ac.uk>
.PP
.Vb 1
\&    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm
.Ve
.PP
Jeff Angielski <jeff@theptrgroup.com>
.PP
.Vb 1
\&    ftpput, ftpget
.Ve
.PP
Edward Betts <edward@debian.org>
.PP
.Vb 1
\&    expr, hostid, logname, whoami
.Ve
.PP
John Beppu <beppu@codepoet.org>
.PP
.Vb 1
\&    du, nslookup, sort
.Ve
.PP
Brian Candler <B.Candler@pobox.com>
.PP
.Vb 1
\&    tiny\-ls(ls)
.Ve
.PP
Randolph Chung <tausq@debian.org>
.PP
.Vb 1
\&    fbset, ping, hostname
.Ve
.PP
Dave Cinege <dcinege@psychosis.com>
.PP
.Vb 2
\&    more(v2), makedevs, dutmp, modularization, auto links file,
\&    various fixes, Linux Router Project maintenance
.Ve
.PP
Jordan Crouse <jordan@cosmicpenguin.net>
.PP
.Vb 1
\&    ipcalc
.Ve
.PP
Magnus Damm <damm@opensource.se>
.PP
.Vb 1
\&    tftp client insmod powerpc support
.Ve
.PP
Larry Doolittle <ldoolitt@recycle.lbl.gov>
.PP
.Vb 1
\&    pristine source directory compilation, lots of patches and fixes.
.Ve
.PP
Glenn Engel <glenne@engel.org>
.PP
.Vb 1
\&    httpd
.Ve
.PP
Gennady Feldman <gfeldman@gena01.com>
.PP
.Vb 2
\&    Sysklogd (single threaded syslogd, IPC Circular buffer support,
\&    logread), various fixes.
.Ve
.PP
Karl M. Hegbloom <karlheg@debian.org>
.PP
.Vb 1
\&    cp_mv.c, the test suite, various fixes to utility.c, &c.
.Ve
.PP
Daniel Jacobowitz <dan@debian.org>
.PP
.Vb 1
\&    mktemp.c
.Ve
.PP
Matt Kraai <kraai@alumni.cmu.edu>
.PP
.Vb 1
\&    documentation, bugfixes, test suite
.Ve
.PP
Stephan Linz <linz@li\-pro.net>
.PP
.Vb 1
\&    ipcalc, Red Hat equivalence
.Ve
.PP
John Lombardo <john@deltanet.com>
.PP
.Vb 1
\&    tr
.Ve
.PP
Glenn McGrath <bug1@iinet.net.au>
.PP
.Vb 3
\&    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
\&    nameif, sed, patch, fold, install, uudecode.
\&    Various bugfixes, review and apply numerous patches.
.Ve
.PP
Manuel Novoa \s-1III\s0 <mjn3@codepoet.org>
.PP
.Vb 3
\&    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
\&    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
\&    get_last_path_component, simplify_path, and a number trivial libbb routines
\&
\&    also bug fixes, partial rewrites, and size optimizations in
\&    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
\&    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
\&    interface, dutmp, ifconfig, route
.Ve
.PP
Vladimir Oleynik <dzo@simtreas.ru>
.PP
.Vb 4
\&    cmdedit; xargs(current), httpd(current);
\&    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
\&    locale, various fixes
\&    and irreconcilable critic of everything not perfect.
.Ve
.PP
Bruce Perens <bruce@pixar.com>
.PP
.Vb 2
\&    Original author of BusyBox in 1995, 1996. Some of his code can
\&    still be found hiding here and there...
.Ve
.PP
Tim Riker <Tim@Rikers.org>
.PP
.Vb 1
\&    bug fixes, member of fan club
.Ve
.PP
Kent Robotti <robotti@metconnect.com>
.PP
.Vb 1
\&    reset, tons and tons of bug reports and patches.
.Ve
.PP
Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>
.PP
.Vb 1
\&    wget \- Contributed by permission of Covad Communications
.Ve
.PP
Pavel Roskin <proski@gnu.org>
.PP
.Vb 1
\&    Lots of bugs fixes and patches.
.Ve
.PP
Gyepi Sam <gyepi@praxis\-sw.com>
.PP
.Vb 1
\&    Remote logging feature for syslogd
.Ve
.PP
Linus Torvalds <torvalds@transmeta.com>
.PP
.Vb 1
\&    mkswap, fsck.minix, mkfs.minix
.Ve
.PP
Mark Whitley <markw@codepoet.org>
.PP
.Vb 2
\&    grep, sed, cut, xargs(previous),
\&    style\-guide, new\-applet\-HOWTO, bug fixes, etc.
.Ve
.PP
Charles P. Wright <cpwright@villagenet.com>
.PP
.Vb 1
\&    gzip, mini\-netcat(nc)
.Ve
.PP
Enrique Zanardi <ezanardi@ull.es>
.PP
.Vb 1
\&    tarcat (since removed), loadkmap, various fixes, Debian maintenance
.Ve
.PP
Tito Ragusa <farmatito@tiscali.it>
.PP
.Vb 1
\&    devfsd and size optimizations in strings, openvt and deallocvt.
.Ve
